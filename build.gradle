import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

plugins{
    id 'java'
}

version 'v0.1A'

tasks.withType(JavaCompile).configureEach{
    sourceCompatibility = 17
    options.release = 17

    options.incremental = true
    options.encoding = 'UTF-8'
}

sourceSets.main {
    java.srcDirs = ["main/src"]
    resources.srcDirs = ["main/assets"]
}

repositories{
    mavenCentral()
    maven{ url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven{ url  'https://raw.githubusercontent.com/Zelaux/Repo/master/repository' }
    maven{ url 'https://www.jitpack.io' }
}

ext{
    sdkRoot = System.getenv("ANDROID_SDK_ROOT") ?: System.getenv("ANDROID_HOME")
}

String arcLibraryModule(String name){
    //module path to full module name
    if(name.contains(':')) name = name.split(':').join("-")
    return "com.github.Zelaux.ArcLibrary:$name:$arcLibraryVersion"
}

String arcModule(String name){
    //skip to last submodule
    if(name.contains(':')) name = name.split(':').last()
    return "com.github.Anuken.Arc:$name:$arcVersion"
}

dependencies{
    compileOnly arcModule("arc-core")
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
    compileOnly("org.jetbrains:annotations:24.0.1")

    implementation arcLibraryModule("graphics:draw3d")
    implementation arcLibraryModule("graphics:dashDraw")
    implementation arcLibraryModule("graphics:extendedDraw")
}

static def os(){ //Returns OS name
    String s = System.getProperty("os.name")
    return s == null ? "" : s
}
static def getdatadir(){ //Returns Mindustry data directory path
    def ret = System.getenv("MINDUSTRY_DATA_DIR")
    if(ret == null){
        def os = os()
        if(os.contains("Windows")){
            return System.getenv("AppData") + "\\Mindustry\\"
        }else if(os.contains("Linux") || os.contains("BSD")){
            if(System.getenv("XDG_DATA_HOME") != null){
                String dir = System.getenv("XDG_DATA_HOME")
                if(!dir.endsWith("/")) dir += "/"
                return dir + "Mindustry/"
            }
            return System.getProperty("user.home") + "/.local/share/Mindustry/"
        }else if(os.contains("Mac")){
            return System.getProperty("user.home") + "/Library/Application Support/Mindustry/"
        }
    }
    return ret
}

task jarAndroid{
    dependsOn "jar"
    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");
        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}
        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")
        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        "d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
                .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar {
    var prop = gradle.startParameter.projectProperties
    String asString = null

    if(prop.containsKey('ex')) {
        asString = "${archivesBaseName}Desktop.${prop.get('ex')}"
    } else {
        println('Using default file exception (jar)')
        asString = "${archivesBaseName}Desktop.jar"
    }

    archiveFileName = asString

    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    from(rootDir) {
        include "mod.json"
    }

    doLast {
        if(prop.containsKey('path')) {
            copy {
                println("Copy file ${asString} to destonation")
                from layout.buildDirectory.file("libs/$asString")
                into layout.buildDirectory.dir(prop.get('path'))
            }
        }

        if(prop.containsKey('m')) {
            exec {
                commandLine 'cmd', '/c', "\"${prop.get('m')}\""
            }
        }
    }
}

task deploy(type: Jar) {
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"
    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }
    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}