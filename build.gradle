import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

plugins{
    id 'java'
    id 'com.github.Zelaux.MindustryModCore' version "$modCoreVersion"
}
mindustryModCore{
    addKaptAnnotations()
//    setupSpriteGenerationTask()
//    setupAnnotationProject(project(":annotations"))
    addArcLibrary()
    addMindustryModCore()
    projectInfo{
        rootDirectory = rootDir
        assetsPath = "assets"
        assetsRawPath = "assets"
        rootPackage = "omaloon"
        modInfoPath = "mod.json"
        revisionsPath = "revisions"
        classPrefix = "OL"
    }
}
version 'v0.1A'

sourceCompatibility = 17
tasks.withType(JavaCompile).configureEach{
    sourceCompatibility = 17
    options.release = 8

    options.incremental = true
    options.encoding = 'UTF-8'
}

sourceSets.main {
    java.srcDirs = ["main/src"]
    resources.srcDirs = ["main/assets"]
}

repositories{
    mavenCentral()
    mavenLocal()
    maven{ url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven{ url  'https://raw.githubusercontent.com/Zelaux/Repo/master/repository' }
    maven{ url 'https://www.jitpack.io' }
}

ext{
    sdkRoot = System.getenv("ANDROID_SDK_ROOT") ?: System.getenv("ANDROID_HOME")
}

dependencies{
    compileOnly arcModule("arc-core")
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
//    compileOnly "com.github.GlennFolker.EntityAnno:entity:$entVersion"
//    kapt "com.github.GlennFolker.EntityAnno:entity:$entVersion"
    implementation arcLibraryModule("graphics:draw3d")
    implementation arcLibraryModule("graphics:dashDraw")
    implementation arcLibraryModule("graphics:extendedDraw")
    compileOnly("org.jetbrains:annotations:24.0.1")

    compileOnly modCoreModule("annotations")
    kapt modCoreModule("annotations")
    annotationProcessor "com.github.GlennFolker.EntityAnno:downgrader:$entVersion"
}

/*entityAnno{
    modName = 'omaloon'
    mindustryVersion = project['mindustryVersion']
    revisionDir = file("$rootDir/revisions/")
    fetchPackage = 'omaloon.fetched'
    genSrcPackage = 'omaloon.entities.comp'
    genPackage = 'omaloon.gen.entities'
}*/

static def os(){ //Returns OS name
    String s = System.getProperty("os.name")
    return s == null ? "" : s
}
static def getdatadir(){ //Returns Mindustry data directory path
    def ret = System.getenv("MINDUSTRY_DATA_DIR")
    if(ret == null){
        def os = os()
        if(os.contains("Windows")){
            return System.getenv("AppData") + "\\Mindustry\\"
        }else if(os.contains("Linux") || os.contains("BSD")){
            if(System.getenv("XDG_DATA_HOME") != null){
                String dir = System.getenv("XDG_DATA_HOME")
                if(!dir.endsWith("/")) dir += "/"
                return dir + "Mindustry/"
            }
            return System.getProperty("user.home") + "/.local/share/Mindustry/"
        }else if(os.contains("Mac")){
            return System.getProperty("user.home") + "/Library/Application Support/Mindustry/"
        }
    }
    return ret
}

task jarAndroid{
    dependsOn "jar"
    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");
        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}
        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")
        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        "d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
                .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar{
    archiveFileName = "${project.archivesBaseName}Desktop.jar"
    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }
    from(rootDir){
        include "mod.json"
    }
}
task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"
    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }
    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}
task jarMindustry(){
    dependsOn "jar"
    doFirst{}
    ext{
        acopy = { String intoPath ->
            delete{
                delete "${intoPath}/${project.archivesBaseName}Desktop.jar"
            }
            copy{
                from "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
                into intoPath
            }
            println "Moved to ${intoPath}"
        }
    }
    doLast{
        def modsDirectories = []
        def file = new File(rootDir, "modsDirectories.txt")
        if(file.exists()){
            BufferedReader reader = new BufferedReader(new FileReader(file))
            reader.lines().forEach(line -> modsDirectories.add(line))
            reader.close()
        }else{
            modsDirectories.add("classic")
        }
        for(String directory : modsDirectories){
            if(directory.startsWith("#") || directory.startsWith("//")){
                println "Directory \"$directory\" was skipped."
                continue
            }
            if(directory.equals("classic")){
                directory = getdatadir() + "mods"
            }
            acopy(directory)
        }
        def time = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss"))
        println "Build ended at: ${time}"
    }
}
task runMindustry{
    dependsOn jarMindustry
    doLast{
        def gamePath = "${temporaryDir.absolutePath}\\Mindustry${mindustryVersion}.jar"
        def gameUrl = mindustryVersion.startsWith("v") ?
                "https://github.com/Anuken/Mindustry/releases/download/${mindustryVersion}/Mindustry.jar" :
                "https://github.com/Anuken/MindustryBuilds/releases/download/${mindustryVersion}/Mindustry-BE-Desktop-${mindustryVersion}.jar"
        def gameFile = new File(gamePath)
        if (!gameFile.exists()) {
            println "Downloading Mindustry ${mindustryVersion} from ${gameUrl} to ${gamePath}"
            new URL(gameUrl).withInputStream{ i -> gameFile.withOutputStream{ it << i } }
            println "Done"
        }
        javaexec{ classpath = files(gamePath) }
    }
}