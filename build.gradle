import java.time.format.DateTimeFormatter

buildscript{
    ext{
        mindustryVersion = 'v140.4'
        jabelVersion = "0.7.0"
        modCoreVersion = "ba7ed8471b8"
        sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
        kotlinVersion = "1.6.0"
        jabelVersion = "0.7.0"
        mindustryModule = { String name ->
            //skip to last submodule
            if(name.contains(':')) name = name.split(':').last()
            return "com.github.Anuken.Mindustry:$name:$mindustryVersion"
        }
        arcModule = { String name ->
            //skip to last submodule
            if(name.contains(':')) name = name.split(':').last()
            return "com.github.Anuken.Arc:$name:$mindustryVersion"
        }
        coreModule = { String name ->
            //skip to last submodule
            if(name.contains(':')) name = name.split(':').last()
            return "com.github.Zelaux.ZelauxModCore:$name:$modCoreVersion"
        }
    }
    ext.kotlin_version = '1.7.0'
    repositories {
        mavenLocal()
        mavenCentral()
        google()
        maven{ url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven{ url 'https://jitpack.io' }
    }
    dependencies {
        classpath "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        classpath "com.github.Anuken.Mindustry:core:$mindustryVersion"
        classpath "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
plugins{
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id "org.jetbrains.kotlin.kapt" version "$kotlinVersion"
}
compileKotlin{
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_1_8
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
sourceSets.main.java.srcDirs = ["src/", "$buildDir/generated/sources/annotationProcessor/java/main"]
sourceSets.main.resources.srcDirs = ["resources/assets"]

repositories{
    mavenLocal()
    mavenCentral()
//        google()
    maven{ url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven{ url 'https://jitpack.io' }
}


configure(project(":annotations")){
    tasks.withType(JavaCompile){
        targetCompatibility = 8
        sourceCompatibility = 8
        options.fork = true
    }
}
//compile with java 8 compatibility for everything except the annotation project
configure(subprojects - project(":annotations")){
    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release', '8'])
    }

    tasks.withType(Javadoc){
        options{
            addStringOption('Xdoclint:none', '-quiet')
            addStringOption('-release', '16')
        }
    }
}
allprojects{
    repositories{
        mavenLocal()
        google()
        mavenCentral()
        maven{ url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven{ url "https://oss.sonatype.org/content/repositories/releases/" }
        maven{ url 'https://jitpack.io' }
    }
    apply plugin: 'maven-publish'
    compileKotlin{
        sourceCompatibility = JavaVersion.VERSION_16
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    tasks.withType(JavaCompile){
        targetCompatibility = 8
        sourceCompatibility = JavaVersion.VERSION_16
        options.encoding = "UTF-8"
//        options.encoding = "windows-1251"
        options.compilerArgs += ["-Xlint:deprecation"]

        options.forkOptions.jvmArgs.addAll([
                '--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
                '--add-opens=java.base/sun.reflect.annotation=ALL-UNNAMED'
        ])
    }
}

apply plugin: 'java'
apply plugin: "java-library"
apply plugin: "kotlin"
apply plugin: "kotlin-kapt"

tasks.withType(JavaCompile){
    targetCompatibility = 8
    sourceCompatibility = 8
    options.encoding = "UTF-8"
//        options.encoding = "windows-1251"
    options.compilerArgs += ["-Xlint:deprecation"]

    options.forkOptions.jvmArgs.addAll([
            '--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-opens=java.base/sun.reflect.annotation=ALL-UNNAMED'
    ])
}
version '1.0'

kapt{
    javacOptions{
        option("-source", "16")
        option("-target", "1.8")
    }
}

compileJava.options.fork = true

task writeProcessors {
    outputs.upToDateWhen{ false }
    new File(rootDir, "annotations/src/main/resources/META-INF/services/").mkdirs()
    def processorFile = new File(rootDir, "annotations/src/main/resources/META-INF/services/javax.annotation.processing.Processor")
    def text = new StringBuilder()
    def files = new File(rootDir, "annotations/src/main/java")

    if (!files.exists())return;
    files.eachFileRecurse(
            groovy.io.FileType.FILES
    ){ file ->
        boolean isProcessor = file.text.contains(" extends ModBaseProcessor") ||
                (file.text.contains(" extends AbstractProcessor") && !file.text.contains("abstract class")) ||
                file.text.contains("@ModAnnotations.AnnotationProcessor");
        if(file.name.endsWith(".java") && isProcessor){
            text.append(file.path.substring(files.path.length() + 1)).append("\n")
        }
    }

    processorFile.text = text.toString().replace(".java", "").replace("/", ".").replace("\\", ".")
}
dependencies{
    compileJava.dependsOn(writeProcessors)
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"

    compileOnly arcModule("arc-core")
    compileOnly arcModule("extensions:flabel")
    compileOnly arcModule("extensions:freetype")
    compileOnly arcModule("extensions:g3d")
    compileOnly arcModule("extensions:fx")
    compileOnly arcModule("extensions:arcnet")
    compileOnly mindustryModule("core")
    /*compileOnly "com.github.Anuken.MindustryJitpack:core:69f0126eca"
    compileOnly "com.github.Anuken.Arc:arc-core:b1b88883e2"*/

    implementation coreModule("core")
    implementation coreModule("utils")
    compileOnly coreModule("annotations")
    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"

    kapt project(":annotations")
}
jar{
    exclude("ol/entities/comp/**")
}

task jarAndroid{
    dependsOn "jar"
    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");
        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}
        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")
        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")
        //dex and desugar files - this requires d8 in your PATH
        "d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
                .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}
jar{
    archiveFileName = "${project.archivesBaseName}Desktop.jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }
    from(rootDir){
        include "mod.json"
        include "icon.png"
    }
    from("resources/assets/"){
        include "**"
    }
}
task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"
    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }
    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}
static def os(){ //Returns OS name
    String s = System.getProperty("os.name");
    return s == null ? "" : s;
}
static def getdatadir(){ //Returns Mindustry data directory path
    def ret = System.getenv("MINDUSTRY_DATA_DIR")
    if(ret == null){
        def os = os()
        if(os.contains("Windows")){
            return System.getenv("AppData") + "\\Mindustry\\"
        }else if(os.contains("Linux") || os.contains("BSD")){
            if(System.getenv("XDG_DATA_HOME") != null){
                String dir = System.getenv("XDG_DATA_HOME")
                if(!dir.endsWith("/")) dir += "/"
                return dir + "Mindustry/"
            }
            return System.getProperty("user.home") + "/.local/share/Mindustry/"
        }else if(os.contains("Mac")){
            return System.getProperty("user.home") + "/Library/Application Support/Mindustry/";
        }
    }
    return ret
}
task mjar(){
    dependsOn "jar"
    doFirst{}
    ext{
        acopy = { String intoPath ->
            delete{
                delete "${intoPath}/${project.archivesBaseName}Desktop.jar"
            }
            copy{
                from "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
                into intoPath
            }
            println "Moved to ${intoPath}"
        }
    }
    doLast{
        def modsDirectories = [];
        def file = new File(rootDir, "modsDirectories.txt");
        if(file.exists()){
            BufferedReader reader = new BufferedReader(new FileReader(file));
            reader.lines().forEach(line -> modsDirectories.add(line))
            reader.close();
        }else{
            modsDirectories.add("classic");
        }
        for(String directory : modsDirectories){
            if(directory.startsWith("#") || directory.startsWith("//")){
                println "Directory \"$directory\" was skipped."
                continue
            }
            if(directory.equals("classic")){
                directory = getdatadir() + "mods";
            }
            acopy(directory);
        }
        def time = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss"));
        println "Build ended at: ${time}"
    }
}

task mrun{
    dependsOn mjar
    doLast{
        def gamePath = temporaryDir.absolutePath + "\\Mindustry$mindustryVersion" + ".jar"
        def gameUrl = mindustryVersion.startsWith("v") ?
                "https://github.com/Anuken/Mindustry/releases/download/$mindustryVersion/Mindustry.jar" :
                "https://github.com/Anuken/MindustryBuilds/releases/download/$mindustryVersion/Mindustry-BE-Desktop-$mindustryVersion.jar"
        def gameFile = new File(gamePath)
        if (!gameFile.exists()) {
            println "Downloading Mindustry $mindustryVersion from ${gameUrl} to ${gamePath}"
            new URL(gameUrl).withInputStream{ i -> gameFile.withOutputStream{ it << i } }
            println "Done"
        }
        javaexec{ classpath = files(gamePath) }
    }
}